template:
    name: 
        {
            pt: 'Quebra de controle de acesso - Genérico',
            en: 'Broken access control - Generic'
        }
    type: Web
    category: 'Broken Access Control'
    subcategory: 'Broken Access Control'
    description: 
        { 
            pt: 'A má implementação do mecanismo de controle de acesso leva a um controle de acesso falho, que pode ser facilmente explorado. Isso é chamado de quebra de controle de acesso. Devido a quebra de controle de acesso, os usuários não autorizados podem visualizar o conteúdo que não têm permissão para visualizar, podem executar funções não autorizadas, até mesmo um invasor pode excluir o conteúdo ou assumir a administração da aplicação.', 
            en: 'Poor implementation of the access control mechanism leads to flawed access control, which can be easily exploited. This is called breaking access control. Due to access control breach, unauthorized users can view content they are not allowed to view, can perform unauthorized functions, even an attacker can delete the content or take over the administration of the application.' 
        }
    recomendation: 
        { 
            pt: "O controle de acesso só é eficaz em código do lado do servidor confiável ou API sem servidor, em que o invasor não pode modificar a verificação ou os metadados do controle de acesso.\r\nExceto para recursos públicos, negar por padrão.\r\nImplemente mecanismos de controle de acesso uma vez e reutilize-os em todo o aplicativo, inclusive minimizando o uso do Cross-Origin Resource Sharing (CORS).\r\nOs controles de acesso do modelo devem impor a propriedade do registro em vez de aceitar que o usuário possa criar, ler, atualizar ou excluir qualquer registro.\r\nOs requisitos exclusivos de limite de negócios do aplicativo devem ser impostos por modelos de domínio.\r\nDesative a listagem de diretórios do servidor web e certifique-se de que os metadados do arquivo (por exemplo, .git) e os arquivos de backup não estejam presentes nas raízes da web.\r\nRegistre falhas de controle de acesso, alerte os administradores quando apropriado (por exemplo, falhas repetidas).\r\nTaxa de limite de acesso à API e ao controlador para minimizar os danos das ferramentas de ataque automatizadas.", 
            en: 'Access control is only effective on trusted server-side code or serverless API, where the attacker cannot modify the access control verification or metadata. Except for public resources, deny by default. Implement access control mechanisms once and reuse them throughout the application, including minimizing the use of Cross-Origin Resource Sharing (CORS). Model access controls should enforce record ownership rather than allowing the user to create, read, update, or delete any record. The application''s unique business boundary requirements must be enforced by domain models. Disable web server directory listing and ensure that file metadata (eg .git) and backup files are not present in the web roots. Log access control failures, alert administrators where appropriate (eg repeated failures). API and controller access limit rate to minimize damage from automated attack tools.' 
        }
    references: ['https://owasp.org/Top10/A01_2021-Broken_Access_Control/']
