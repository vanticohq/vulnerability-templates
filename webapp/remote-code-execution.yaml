template:
    name: 
        {
            pt: 'Execução remota de código',
            en: 'Remode code execution'
        }
    type: Web
    category: 'Remote Code Execution'
    subcategory: 'Remote Code Execution (RCE)'
    description: 
        { 
            pt: 'As vulnerabilidades de injeção de código ocorrem onde a saída ou o conteúdo servido de um aplicativo da Web pode ser manipulado de forma a acionar a execução de código do lado do servidor. Em alguns aplicativos da Web mal escritos que permitem que os usuários modifiquem arquivos do lado do servidor (como postando em um quadro de mensagens ou livro de visitas), às vezes é possível injetar código na linguagem de script do próprio aplicativo.', 
            en: 'Code injection vulnerabilities occur where the output or served content of a web application can be manipulated in a way that triggers server-side code execution. In some poorly written web applications that allow users to modify files server-side (such as posting to a message board or guestbook), it is sometimes possible to inject code into the application''s own scripting language.' 
        }
    recomendation: 
        { 
            pt: "De longe, a maneira mais eficaz de evitar vulnerabilidades de injeção de comando do SO é nunca chamar comandos do SO a partir do código da camada de aplicativo. Em praticamente todos os casos, existem formas alternativas de implementar a funcionalidade necessária usando APIs de plataforma mais seguras.\r\n\r\nSe for considerado inevitável chamar comandos do SO com entrada fornecida pelo usuário, a validação de entrada forte deve ser executada. Alguns exemplos de validação eficaz incluem:\r\n\r\nValidação em relação a uma lista de permissões de valores permitidos.\r\nValidando que a entrada é um número.\r\nValidando que a entrada contém apenas caracteres alfanuméricos, nenhuma outra sintaxe ou espaço em branco.\r\nNunca tente limpar a entrada escapando dos metacaracteres do shell. Na prática, isso é muito propenso a erros e vulnerável a ser contornado por um invasor habilidoso.\r\n", 
            en: 'By far the most effective way to avoid OS command injection vulnerabilities is to never call OS commands from application layer code. In virtually all cases, there are alternative ways to implement required functionality using more secure platform APIs.  If calling OS commands with user-provided input is deemed unavoidable, strong input validation must be performed. Some examples of effective validation include:  Validation against a whitelist of allowed values. Validating that the input is a number. Validating that the input contains only alphanumeric characters, no other syntax or whitespace. Never try to clear input by escaping shell metacharacters. In practice, this is very error-prone and vulnerable to being circumvented by a skilled attacker.' 
        }
    references: ['https://crashtest-security.com/command-injection/#:~:text=A%20command%20injection%20vulnerability%20allows,the%20application%20server%20or%20system.']
