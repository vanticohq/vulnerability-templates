template:
    name: 
        {
            pt: 'Injeção de SQL',
            en: 'SQL Injection'
        }
    type: Web
    category: Injection
    subcategory: 'SQL Injection'
    description: 
        { 
            pt: "Devido à necessidade de conteúdo dinâmico dos aplicativos da Web atuais, muitos contam com um back-end de banco de dados para armazenar dados que serão chamados e processados ​​pelo aplicativo da Web (ou outros programas). Os aplicativos da Web recuperam dados do banco de dados usando consultas SQL (Structured Query Language).\r\n\r\nPara atender às demandas de muitos desenvolvedores, os servidores de banco de dados (como MSSQL, MySQL, Oracle etc.) possuem funcionalidades integradas adicionais que podem permitir amplo controle do banco de dados e interação com o próprio sistema operacional do host.\r\n\r\nUma injeção de SQL ocorre quando um valor originário da solicitação do cliente é usado em uma consulta SQL sem higienização prévia. Isso pode permitir que os cibercriminosos executem código SQL arbitrário e roubem dados ou usem a funcionalidade adicional do servidor de banco de dados para controlar mais componentes do servidor.", 
            en: 'Due to the need for dynamic content in today''s web applications, many rely on a database backend to store data that will be called and processed by the web application (or other programs). Web applications retrieve data from the database using SQL (Structured Query Language) queries.  To meet the demands of many developers, database servers (such as MSSQL, MySQL, Oracle, etc.) have additional built-in functionality that can allow extensive database control and interaction with the host operating system itself.  An SQL injection occurs when a value originating from the client''s request is used in an SQL query without prior sanitization. This could allow cybercriminals to execute arbitrary SQL code and steal data or use additional database server functionality to control more server components.' 
        }
    recomendation: 
        { 
            pt: "O único método comprovado para evitar ataques de injeção de SQL e ainda manter a funcionalidade completa do aplicativo é usar consultas parametrizadas (também conhecidas como instruções preparadas). Ao utilizar este método de consulta ao banco de dados, qualquer valor fornecido pelo cliente será tratado como um valor de string em vez de parte da consulta SQL.\r\nAlém disso, ao utilizar consultas parametrizadas, o mecanismo de banco de dados verificará automaticamente se a string que está sendo usada corresponde à da coluna. Por exemplo, o mecanismo de banco de dados verificará se a entrada fornecida pelo usuário é um número inteiro se a coluna do banco de dados estiver configurada para conter números inteiros.", 
            en: 'The only proven method to prevent SQL injection attacks and still maintain full application functionality is to use parameterized queries (also known as prepared statements). When using this database query method, any value provided by the client will be treated as a string value rather than part of the SQL query. Also, when using parameterized queries, the database engine will automatically verify that the string being used matches the one in the column. For example, the database engine will check that the input provided by the user is an integer if the database column is configured to contain integers.' 
        }
    references: ['http://unixwiz.net/techtips/sql-injection.html , http://en.wikipedia.org/wiki/SQL_injection , http://www.securiteam.com/securityreviews/5DP0N1P76E.html , https://www.owasp.org/index.php/SQL_Injection , http://projects.webappsec.org/w/page/13246963/SQL%20Injection , http://www.w3schools.com/sql/sql_injection.asp']
